
create table octombrie_cma (
    id varchar2(50),
    data date,
    primary key(id)
);
-- PL/SQL block pentru popularea datelor
-- Am folosit 3 loop-uri diferite, pentru a nu avea imprumuturi pentru fiecare zi,
-- astfel, voi putea adapta mai bine ex la datele problemei   
-- in unele zile voi avea mai mult de un imrumut
BEGIN
    FOR i IN 1..5 LOOP
        INSERT INTO octombrie_cma (id, data)
        VALUES (i, TO_DATE('2023-10-0' || i, 'YYYY-MM-DD'));
    END LOOP;
  
    FOR i IN 10..17 LOOP
        INSERT INTO octombrie_cma (id, data)
        VALUES (i, TO_DATE('2023-10-' || i, 'YYYY-MM-DD'));
        INSERT INTO octombrie_cma (id, data)
        VALUES ('3' || i, TO_DATE('2023-10-' || (i + 1), 'YYYY-MM-DD'));
    END LOOP;
    
    FOR i IN 23..27 LOOP
        INSERT INTO octombrie_cma (id, data)
        VALUES (i, TO_DATE('2023-10-' || i, 'YYYY-MM-DD'));
        INSERT INTO octombrie_cma (id, data)
        VALUES ('4' || i, TO_DATE('2023-10-' || i, 'YYYY-MM-DD'));
        INSERT INTO octombrie_cma (id, data)
        VALUES ('40' || i, TO_DATE('2023-10-' || i, 'YYYY-MM-DD'));
    END LOOP;
END;
/

select * from octombrie_cma;

--Rezolvare conditie E2 
-- in PL/SQL block, pentru a calcula cate imprumuturi au fost efectuate pentru fiecare zi a lunii octombrie
DECLARE 
    v_total NUMBER := 0; -- o variabila pentru a tine evidenta numarului total de imprumuturi
BEGIN
    -- iterez prin fiecare zi a lunii octombrie (de la 1 la 31)
    FOR v_day IN 1..31 LOOP
        -- update pentru fiecare zi v_total = 0
        v_total := 0;

        -- iterez prin toate inegistrarile
        FOR rec IN (SELECT * FROM octombrie_cma) LOOP
            -- verific daca data coincide cu ziua curenta
            IF TO_CHAR(rec.data, 'DD') = TO_CHAR(TO_DATE('2023-10-' || v_day, 'YYYY-MM-DD'), 'DD') THEN
                v_total := v_total + 1; -- atunci increm nr de imprumuturi p/u ziua curenta
            END IF;
        END LOOP;

        -- afisez rezultatul pentru ziua curenta
        DBMS_OUTPUT.PUT_LINE('Ziua ' || v_day || ': ' || v_total || ' imprumuturi');
    END LOOP;
END;
/

--Rezolvare Ex 5 în baza proiectului propriu
VARIABLE rezultat VARCHAR2(150)

BEGIN

    SELECT e.id_echipa
    INTO :rezultat
    FROM echipa e, angajati a
    WHERE e.id_echipa = a.id_echipa
    GROUP BY e.id_echipa
    HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                        FROM angajati 
                        GROUP BY id_echipa);
    DBMS_OUTPUT.PUT_LINE('Echipa '|| :rezultat);
END;
/
PRINT rezultat;

--TESTARE V_COD = 1001
SET VERIFY OFF
DECLARE
    V_COD   ANGAJATI.ID_ANGAJAT%TYPE:=&P_COD;
    V_BONUS         NUMBER(8);
    V_SALARIU_ANUAL NUMBER(8);
BEGIN

    SELECT SALARIU*12 INTO V_SALARIU_ANUAL
    FROM ANGAJATI
    WHERE ID_ANGAJAT = V_COD;
    IF V_SALARIU_ANUAL>=200001
            THEN V_BONUS:=200000;
        ELSIF V_SALARIU_ANUAL BETWEEN 100001 AND 200000
            THEN V_BONUS:=10000;
        ELSE V_BONUS:=5000;
    END IF;
DBMS_OUTPUT.PUT_LINE('BONUSUL ESTE ' || V_BONUS);
END;
/
SET VERIFY ON;

SELECT * FROM ANGAJATI WHERE ID_ECHIPA='Shadow Strikers';


--ex9
DEFINE p_cod_sal = 1001;
DEFINE p_cod_ec = 'Shadow Strikers';  
DEFINE p_procent = 20;

DECLARE
    v_cod_sal angajati.id_angajat%TYPE := &p_cod_sal;
    v_cod_ec angajati.id_echipa%TYPE := '&p_cod_ec';  
    v_procent NUMBER(8) := &p_procent;
BEGIN
    UPDATE angajati
    SET id_echipa = v_cod_ec,
        salariu = salariu + (salariu * v_procent / 100)
    WHERE id_angajat = v_cod_sal;
    
    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu exista un angajat cu acest cod');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Actualizare realizata');
    END IF;
END;
/
ROLLBACK;


--Ex E2 laborator 2
--definire tip colectie
CREATE OR REPLACE TYPE tip_orase_cma AS VARRAY(10) OF VARCHAR2(50);

--crearea tabelului excursie_cma
CREATE TABLE excursie_cma (
  cod_excursie NUMBER(4),
  denumire VARCHAR2(20),
  orase tip_orase_cma,
  status VARCHAR2(20),
  PRIMARY KEY(cod_excursie)
);

--INSERARE 5 INREGISTRARI IN TABEL:
INSERT INTO excursie_cma (cod_excursie, denumire, orase, status) VALUES (1, 'Exploram Europa', tip_orase_cma('Paris', 'Londra', 'Roma'), 'disponibila');

INSERT INTO excursie_cma (cod_excursie, denumire, orase, status) VALUES (2, 'Circuit in Italia', tip_orase_cma('Roma', 'Venetia', 'Florenta'), 'disponibila');

INSERT INTO excursie_cma (cod_excursie, denumire, orase, status) VALUES (3, 'Tur Scandinav', tip_orase_cma('Copenhaga', 'Oslo', 'Stockholm'), 'disponibila');

INSERT INTO excursie_cma (cod_excursie, denumire, orase, status) VALUES (4, 'Descoperind Spania', tip_orase_cma('Barcelona', 'Madrid', 'Sevilia'), 'anulata');

INSERT INTO excursie_cma (cod_excursie, denumire, orase, status) VALUES (5, 'Europa Centrala', tip_orase_cma('Praga', 'Viena', 'Budapesta'), 'anulata');

select * from excursie_cma;

--a
--Adăugarea unui oraș nou în lista care va fi ultimul vizitat în excursia respectivă
BEGIN
UPDATE excursie_cma
SET orase = tip_orase_cma('Barcelona', 'Madrid', 'Sevilia','Valencia')
WHERE cod_excursie = 4; -- 
END;
/

--b

BEGIN
UPDATE excursie_cma
SET orase = tip_orase_cma('Praga', 'Valencia','Viena', 'Budapesta')
WHERE cod_excursie = 5; -- 
END;
/

--c
BEGIN
UPDATE excursie_cma
SET orase = tip_orase_cma('Londra', 'Paris')
WHERE cod_excursie = 1; -- Exemplu: actualizăm pentru cod_excursie 1
END;
/

--delete paris
BEGIN
UPDATE excursie_cma
SET orase = tip_orase_cma('Londra')
WHERE cod_excursie = 1; -- Exemplu: actualizăm pentru cod_excursie 1
END;
/



DECLARE
  TYPE tip_orase_cma IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
  v_cod_excursie NUMBER;
  v_orase tip_orase_cma;
BEGIN
  FOR v_cod_excursie IN 1..5 LOOP
    -- Populați v_orase cu numele orașelor pentru excursia dată
    SELECT column_value
    BULK COLLECT INTO v_orase
    FROM TABLE((SELECT orase FROM excursie_cma WHERE cod_excursie = v_cod_excursie));

    -- Afișați numărul de orașe pentru excursia curentă
    DBMS_OUTPUT.PUT_LINE('Nr orașe pentru excursia cu id ' || v_cod_excursie || ' este: ' || v_orase.COUNT);

    -- Afișați numele orașelor pentru excursia curentă
    DBMS_OUTPUT.PUT('Numele orașelor pentru excursia cu codul ' || v_cod_excursie || ': ');
    FOR i IN v_orase.FIRST..v_orase.LAST LOOP
      DBMS_OUTPUT.PUT(v_orase(i) || ' ');
    END LOOP;
    DBMS_OUTPUT.NEW_LINE;
  END LOOP;
END;
/

SET VERIFY OFF
ACCEPT cod_excursie PROMPT 'Introduceți codul excursiei: '

--c
--introducerea unui cod excursie de la tastatura , ex 2
SET VERIFY OFF
DECLARE
  TYPE tip_orase_cma IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
  v_cod_excursie NUMBER := &cod_excursie;
  v_orase tip_orase_cma;
BEGIN
  -- Populați v_orase cu numele orașelor pentru excursia dată
  SELECT column_value
  BULK COLLECT INTO v_orase
  FROM TABLE((SELECT orase FROM excursie_cma WHERE cod_excursie = v_cod_excursie));

  -- Afișați numărul de orașe pentru excursia specificată
  DBMS_OUTPUT.PUT_LINE('Numărul de orașe pentru excursia cu codul ' || v_cod_excursie || ' este: ' || v_orase.COUNT);

  -- Afișați numele orașelor pentru excursia specificată
  DBMS_OUTPUT.PUT('Numele orașelor pentru excursia cu codul ' || v_cod_excursie || ': ');
  FOR i IN v_orase.FIRST..v_orase.LAST LOOP
    DBMS_OUTPUT.PUT(v_orase(i) || ' ');
  END LOOP;
  DBMS_OUTPUT.NEW_LINE;
END;
/
SET VERIFY ON;

--d
DECLARE
  v_min_orase NUMBER;
  v_cod_excursie excursie_cma.cod_excursie%TYPE; 
BEGIN
    -- Găsirea numărului minim de orașe vizitate
    SELECT cod_excursie, MIN(orase.COUNT) INTO v_min_orase
    FROM excursie_cma
    WHERE cod_excursie = v_cod_excursie
    GROUP BY cod_excursie;
    -- Anularea excursiilor cu cel mai mic număr de orașe 
    UPDATE excursie_cma
    SET status = 'anulata'
    WHERE cod_excursie = v_cod_excursie
      AND orase.COUNT = v_min_orase;

    DBMS_OUTPUT.PUT_LINE('Excursiile cu cel mai mic număr de orașe (' || v_min_orase || ') au fost anulate.');
END;
/



--E4 
--ex 9
CREATE OR REPLACE TYPE subordonati_cma AS VARRAY(10) OF NUMBER(4);
/
CREATE TABLE manageri_cma (cod_mgr NUMBER(10),
                           nume VARCHAR2(20),
                           lista subordonati_cma);
DECLARE
  v_sub   subordonati_cma:= subordonati_cma(100,200,300);
  v_lista manageri_cma.lista%TYPE;
BEGIN
  INSERT INTO manageri_cma
  VALUES (1, 'Popescu Alexandru', v_sub);
  INSERT INTO manageri_cma
  VALUES (2, 'Ionescu Andreea', null);
  INSERT INTO manageri_cma
  VALUES (3, 'Stanciu Oana', subordonati_cma(400,500));
SELECT lista
  INTO   v_lista
  FROM   manageri_cma
  WHERE  cod_mgr=1;
  FOR j IN v_lista.FIRST..v_lista.LAST loop
       DBMS_OUTPUT.PUT_LINE (v_lista(j));
  END LOOP;
END;
/
SELECT * FROM manageri_cma;
select * from angajati;

--10

CREATE OR REPLACE TYPE tip_telefon IS TABLE OF VARCHAR(12);

ALTER TABLE angajati
ADD (telefon tip_telefon)
NESTED TABLE telefon STORE AS tabel_telefon;

INSERT INTO ANGAJATI (ID_ANGAJAT, NUME, PRENUME, EMAIL, NUMAR_TELEFON,SALARIU, ID_LOCATIE, ID_ECHIPA, ID_JOB, DATA_ANGAJARII, telefon)
VALUES (1049, 'Ionescu', 'Andreea', 'andreea.ionescu@company.com', 0732123456, 11500, 2, 'Shadow Strikers', 'Product Owner', TO_DATE('2022-06-16', 'YYYY-MM-DD'), tip_telefon('073XXX', '0214XXX', '02149XXX'));

UPDATE angajati
SET    telefon = tip_telefon('073XXX', '0214XXX')
WHERE  id_angajat=1001;

SELECT  a.id_angajat, b.*
FROM    angajati a, TABLE (a.telefon) b;

DROP TYPE  tip_telefon_cma;


select * from angajati;


